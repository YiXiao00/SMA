smartHomes\src\main\java\com\smarthome\sso\web\constants\ServiceResult.java:

This file provides enums to return when certain functions are called to say whether it was successful.

smartHomes\src\main\java\com\smarthome\sso\web\controller\FiwareController.java:


smartHomes\src\main\java\com\smarthome\sso\web\controller\InterceptorConfig.java:



smartHomes\src\main\java\com\smarthome\sso\web\controller\MainController.java:

Main controller provides most of the functionality of the program. It has a lot of core functions and maps the relevant URLS to the functions.

Attributes:

userService
deviceService
bufferDS
taskService

Methods:

deleteUser: Deletes a user, all of their devices, and all relevant tasks from the database. Mapped to /user/delete
showUsers: Returns a comma separated string with all of the user's usernames in the database. Mapped to /user/all
addDevice: Adds a new device associated to a specified user to the database. Mapped to /device/add
restartDeviceDB: Deletes all devices, used for debugging.
showAllDevices: Returns list of all devices and their owners, requires admin privelege. Mapped to /device/all
deleteDevice: Deletes a specific device and all tasks associated with it. Mapped to /device/delete
toggleDevice: Toggles on or off a device owned by the current user. Mapped to /device/toggle
showUserDevices: Shows all devices owned by the current user. Mapped to /device/user/all
deleteAllDatabases: Deletes all users, devices and tasks, used for debugging
findTasks: Returns a list of all tasks with their associated user, device, time and duration. Mapped to /task/view
findUserTasks: Same as findTasks but for the current user's tasks only. Mapped to /task/user/view
deleteTask: Deletes a specified type of task for the current user. Mapped to /task/delete
deleteAllTasks: Deletes task database
addTasks: Takes device type, time and duration, and creates tasks for the current user. Mapped to /task/add
getHomePage: Maps /homepage to the home.html file
getLoginLanding: Maps /loginLanding to the loginLanding.html file
getRoom: maps /user/dashboard to room.html file
printOutStatement: Run every second to check whether a scheduled device needs to be toggled on or off



smartHomes\src\main\java\com\smarthome\sso\web\controller\SigninController.java:

Sign in controller provides functionality required for user based services such as getting user information, logging in and registering

Attributes: 

userService

Methods:

getUsernameFromSessionId: Checks cookies to see if there's a current session. If so, it returns the currently logged in user's username.
getUserInfo: Debug function used for testing.
registerOneNewUser: Creates new user with username and password provided, after completing validation checks
logIn: Checks cookies to see if there is a current session. If not, username and password are checked in database. If username and password match then a session cookie is added.

smartHomes\src\main\java\com\smarthome\sso\web\controller\SigninInterceptor.java:

SigninInterceptor checks whether there are cookies associated to the current user and returns true or false.

smartHomes\src\main\java\com\smarthome\sso\web\domain\Device.java:

Device class, used to represent a device. Has relevant device attributes, getters and setters and a toggle on/off function. 
Attributes: deviceId, userId, type, poweredOn, relativeUserId
Paired with DeviceRepository.java which links the device class to the database

smartHomes\src\main\java\com\smarthome\sso\web\domain\Task.java:

Task class to represent tasks. Has relevant task attributes and getters and setters.
Attributes: taskId, type, userId, relativeDeviceId, duration, calendar, repeated.

smartHomes\src\main\java\com\smarthome\sso\web\domain\User.java:

User class to represent users.
Attributes: userId, username, password
Methods to return userId, username, password, add and remove devices owned and return the number of devices owned.
